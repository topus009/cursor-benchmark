// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

console.log('Testing models data...');

// –≠—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª .ts
// –ù–æ –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π JavaScript —Ç–µ—Å—Ç

const testModels = [
  {
    id: 'cursor-small',
    name: 'cursor-small',
    provider: 'Cursor',
    displayName: 'Cursor Small (Free)',
    description: 'Fast and efficient free tier model',
    contextWindow: 32000,
    maxTokens: 2048,
    isFree: true,
    isRecommended: false,
    category: 'chat',
    capabilities: ['chat', 'basic_coding', 'summarization']
  },
  {
    id: 'claude-3-5-sonnet',
    name: 'claude-3-5-sonnet-20241022',
    provider: 'Anthropic',
    displayName: 'Claude 3.5 Sonnet',
    description: 'Most intelligent model for complex reasoning and coding tasks',
    contextWindow: 200000,
    maxTokens: 8192,
    pricing: { input: 0.003, output: 0.015 },
    isFree: false,
    isRecommended: true,
    category: 'coding',
    capabilities: ['code_generation', 'code_review', 'debugging', 'documentation', 'analysis', 'reasoning']
  },
  {
    id: 'grok-1',
    name: 'grok-1',
    provider: 'xAI',
    displayName: 'Grok 1',
    description: 'Original Grok model',
    contextWindow: 128000,
    maxTokens: 4096,
    pricing: { input: 0.0008, output: 0.004 },
    isFree: false,
    isRecommended: false,
    category: 'chat',
    capabilities: ['chat', 'analysis', 'reasoning', 'humor']
  }
];

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${testModels.length} –º–æ–¥–µ–ª–µ–π:`);
testModels.forEach(model => {
  console.log(`- ${model.displayName} (${model.provider})`);
});

console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:');
const byProvider = {};
testModels.forEach(model => {
  byProvider[model.provider] = (byProvider[model.provider] || 0) + 1;
});

Object.entries(byProvider).forEach(([provider, count]) => {
  console.log(`${provider}: ${count} –º–æ–¥–µ–ª–µ–π`);
});

console.log('\nüéØ –ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
const grokModels = testModels.filter(m => m.provider === 'xAI');
if (grokModels.length > 0) {
  grokModels.forEach(model => {
    console.log(`- ${model.displayName}: ${model.description}`);
    console.log(`  –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${model.contextWindow} —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log(`  –¶–µ–Ω–∞: $${model.pricing?.input || 'N/A'} –∑–∞ –≤—Ö–æ–¥, $${model.pricing?.output || 'N/A'} –∑–∞ –≤—ã—Ö–æ–¥`);
    console.log(`  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${model.capabilities.join(', ')}`);
    console.log('');
  });
} else {
  console.log('‚ùå –ú–æ–¥–µ–ª–∏ xAI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
}
