const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

async function updateExistingModels() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π...');

    // –®–∞–≥ 1: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
    const resetUpdate = await prisma.aIModel.updateMany({
      data: {
        isRecommended: false,
        isAvailableInCursor: false,
        isReasoning: false
      }
    });

    console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ –¥–ª—è ${resetUpdate.count} –º–æ–¥–µ–ª–µ–π (recommended, cursor, reasoning)`);

    // –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è isFree
    // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∫–∞–∫ –ø–ª–∞—Ç–Ω—ã–µ
    await prisma.aIModel.updateMany({
      data: {
        isFree: false
      }
    });

    // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ DeepSeek –º–æ–¥–µ–ª–∏
    const deepSeekUpdate = await prisma.aIModel.updateMany({
      where: {
        provider: 'DeepSeek'
      },
      data: {
        isFree: true
      }
    });

    console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ ${deepSeekUpdate.count} DeepSeek –º–æ–¥–µ–ª–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const recommendedCount = await prisma.aIModel.count({
      where: { isRecommended: true }
    });

    const freeModels = await prisma.aIModel.findMany({
      where: { isFree: true },
      select: { name: true, provider: true },
      orderBy: { name: 'asc' }
    });

    console.log(`üìä –ú–æ–¥–µ–ª–µ–π —Å –º–µ—Ç–∫–æ–π recommended: ${recommendedCount}`);
    console.log(`üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ${freeModels.length}`);

    if (freeModels.length > 0) {
      console.log('–°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:');
      freeModels.forEach(model => {
        console.log(`  ${model.name} (${model.provider})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  updateExistingModels();
}
