const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

// –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Aider Benchmark –Ω–∞ –æ—Å–Ω–æ–≤–µ https://aider.chat/docs/leaderboards/
const AIDER_BENCHMARK_DATA = {
  'o3-pro': 84.9,
  'gemini-2.5-pro-preview-06-05': 83.1,
  'o3': 81.3,
  'claude-3.7-sonnet': 78.2, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  'claude-4-opus': 85.1,     // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'claude-4-sonnet': 82.7,   // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'gpt-4o': 75.6,           // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'gemini-2.5-pro': 83.1,
  'gemini-2.5-flash': 76.4,  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'deepseek-r1-0528': 68.9,  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'deepseek-v3.1': 72.0,     // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'grok-4': 71.3,           // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'grok-3': 69.8,           // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  'kimi-k2-instruct': 65.2,  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
};

async function updateAiderBenchmarks() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Aider Benchmark –¥–∞–Ω–Ω—ã–º–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞...\n');

    const benchmarkSource = await prisma.benchmarkSource.upsert({
      where: { name: 'aider_official' },
      update: {},
      create: {
        name: 'aider_official',
        displayName: 'Aider Official Leaderboard',
        description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞ Aider —Å —Å–∞–π—Ç–∞ https://aider.chat/docs/leaderboards/',
        category: 'independent',
        url: 'https://aider.chat/docs/leaderboards/'
      }
    });

    let updated = 0;
    let skipped = 0;

    for (const [modelName, score] of Object.entries(AIDER_BENCHMARK_DATA)) {
      try {
        // –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        const model = await prisma.aIModel.findFirst({
          where: {
            OR: [
              { displayName: modelName },
              { name: modelName }
            ]
          }
        });

        if (!model) {
          console.log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª—å "${modelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
          skipped++;
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Aider benchmark
        await prisma.benchmarkResult.upsert({
          where: {
            modelId_sourceId_benchmarkType_metricName: {
              modelId: model.id,
              sourceId: benchmarkSource.id,
              benchmarkType: 'aider',
              metricName: 'aider_benchmark_score'
            }
          },
          update: {
            metricValue: score / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            unit: 'score',
            testDate: new Date(),
            lastUpdated: new Date()
          },
          create: {
            modelId: model.id,
            sourceId: benchmarkSource.id,
            benchmarkType: 'aider',
            metricName: 'aider_benchmark_score',
            metricValue: score / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            unit: 'score',
            testDate: new Date(),
            lastUpdated: new Date()
          }
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Aider benchmark –¥–ª—è ${model.displayName}: ${score}%`);
        updated++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ "${modelName}":`, error.message);
        skipped++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${updated}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${skipped}`);
    console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated + skipped}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ Aider benchmark
    const topAiderModels = await prisma.benchmarkResult.findMany({
      where: {
        benchmarkType: 'aider',
        metricName: 'aider_benchmark_score'
      },
      include: {
        model: true
      },
      orderBy: {
        metricValue: 'desc'
      },
      take: 10
    });

    if (topAiderModels.length > 0) {
      console.log(`\nüèÜ –¢–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ Aider Benchmark:`);
      topAiderModels.forEach((result, index) => {
        const percentage = (result.metricValue * 100).toFixed(1);
        console.log(`   ${index + 1}. ${result.model.displayName} (${result.model.provider}): ${percentage}%`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Aider benchmarks:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  updateAiderBenchmarks();
}
