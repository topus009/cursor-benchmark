const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

async function addTestData() {
  try {
    console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...');

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const existingModels = await prisma.aIModel.findMany({
      select: { id: true, name: true, modelId: true },
      take: 10
    });

    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    existingModels.forEach(model => {
      console.log(`  ${model.modelId}: ${model.name}`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
    const testBenchmarks = [];
    for (const model of existingModels.slice(0, 3)) { // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
      testBenchmarks.push(
        {
          modelId: model.id,
          benchmarkType: 'response_time',
          metricName: 'avg_response_time',
          metricValue: Math.random() * 5 + 1, // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 1 –¥–æ 6 —Å–µ–∫—É–Ω–¥
          unit: 'seconds'
        },
        {
          modelId: model.id,
          benchmarkType: 'code_quality',
          metricName: 'pass_rate',
          metricValue: Math.random() * 0.3 + 0.7, // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 70% –¥–æ 100%
          unit: 'percentage'
        }
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
    const testRatings = [];
    for (const model of existingModels.slice(0, 3)) { // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
      testRatings.push(
        {
          modelId: model.id,
          rating: Math.floor(Math.random() * 2) + 4, // –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 4 –¥–æ 5
          speedRating: Math.floor(Math.random() * 2) + 4,
          qualityRating: Math.floor(Math.random() * 2) + 4,
          costRating: Math.floor(Math.random() * 3) + 3 // –û—Ç 3 –¥–æ 5
        },
        {
          modelId: model.id,
          rating: Math.floor(Math.random() * 2) + 4,
          speedRating: Math.floor(Math.random() * 2) + 4,
          qualityRating: Math.floor(Math.random() * 2) + 4,
          costRating: Math.floor(Math.random() * 3) + 3
        }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    const benchmarkSource = await prisma.benchmarkSource.upsert({
      where: { name: 'test_source' },
      update: {},
      create: {
        name: 'test_source',
        displayName: 'Test Benchmark Source',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
        category: 'independent',
        url: 'https://example.com'
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–Ω—á–º–∞—Ä–∫–∏
    for (const benchmark of testBenchmarks) {
      await prisma.benchmarkResult.upsert({
        where: {
          modelId_sourceId_benchmarkType_metricName: {
            modelId: benchmark.modelId,
            sourceId: benchmarkSource.id,
            benchmarkType: benchmark.benchmarkType,
            metricName: benchmark.metricName
          }
        },
        update: {
          metricValue: benchmark.metricValue,
          unit: benchmark.unit
        },
        create: {
          modelId: benchmark.modelId,
          sourceId: benchmarkSource.id,
          benchmarkType: benchmark.benchmarkType,
          metricName: benchmark.metricName,
          metricValue: benchmark.metricValue,
          unit: benchmark.unit,
          testDate: new Date(),
          lastUpdated: new Date()
        }
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    for (const rating of testRatings) {
      await prisma.userRating.create({
        data: {
          modelId: rating.modelId,
          sessionId: `test_session_${Math.random()}`,
          rating: rating.rating,
          speedRating: rating.speedRating,
          qualityRating: rating.qualityRating,
          costRating: rating.costRating,
          comment: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
          taskType: 'coding'
        }
      });
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:', testBenchmarks.length);
    console.log('‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', testRatings.length);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  addTestData();
}
