const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

function parseHTMLModels() {
  try {
    const htmlContent = fs.readFileSync(path.join(__dirname, '..', 'cursor-models.html'), 'utf8');

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ HTML
    const modelRegex = /<span[^>]*>([^<]+?)<\/span>/g;
    const maxOnlyRegex = /MAX Only/g;

    const models = [];
    let match;
    let currentIndex = 0;

    while ((match = modelRegex.exec(htmlContent)) !== null) {
      const modelName = match[1].trim();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (!modelName ||
          modelName === 'Add or search model' ||
          modelName.includes('MAX Only') ||
          models.some(m => m.name === modelName)) {
        continue;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–º–∏—É–º (MAX Only)
      const isPremium = htmlContent.substring(currentIndex, match.index).includes('MAX Only');

      // –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ HTML —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Cursor
      const isAvailableInCursor = true;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏
      let provider = 'Unknown';
      let category = 'chat';
      let isFree = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ

      if (modelName.includes('claude')) {
        provider = 'Anthropic';
        category = 'coding';
        // Claude –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ, –∫—Ä–æ–º–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
        isFree = false;
      } else if (modelName.includes('gpt')) {
        provider = 'OpenAI';
        category = 'coding';
        // GPT –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      } else if (modelName.includes('gemini')) {
        provider = 'Google';
        category = 'coding';
        // Gemini –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      } else if (modelName.includes('deepseek')) {
        provider = 'DeepSeek';
        category = 'coding';
        // DeepSeek –∏–º–µ–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
        isFree = true;
      } else if (modelName.includes('grok')) {
        provider = 'xAI';
        category = 'coding';
        // Grok –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      } else if (modelName.includes('kimi')) {
        provider = 'Kimi';
        category = 'coding';
        // Kimi –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      } else if (modelName.includes('cursor')) {
        provider = 'Cursor';
        category = 'coding';
        // Cursor –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      } else if (modelName.includes('o1') || modelName.includes('o3') || modelName.includes('o4')) {
        provider = 'OpenAI';
        category = 'reasoning';
        // o1, o3, o4 - –ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
        isFree = false;
      } else if (modelName.includes('mistral')) {
        provider = 'Mistral';
        category = 'coding';
        // Mistral –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      } else if (modelName.includes('llama')) {
        provider = 'Meta';
        category = 'coding';
        // Llama –º–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–Ω—ã–µ
        isFree = false;
      }

      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ MAX Only, –æ–Ω–∞ —Ç–æ—á–Ω–æ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è
      if (isPremium) {
        isFree = false;
      }

      const model = {
        name: modelName,
        displayName: modelName,
        modelId: modelName.toLowerCase().replace(/[^a-z0-9]/g, '-'),
        provider: provider,
        category: category,
        isFree: isFree,
        isRecommended: false, // –£–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ recommended
        isAvailableInCursor: isAvailableInCursor,
        description: `${category === 'coding' ? '–ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è' : '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò'} –æ—Ç ${provider}${isFree ? ' (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)' : ''}`,
        capabilities: JSON.stringify([
          category === 'coding' ? 'code_generation' : 'text_generation',
          'analysis',
          'problem_solving'
        ])
      };

      models.push(model);
      currentIndex = match.index + match[0].length;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
    return models;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML:', error);
    return [];
  }
}

async function importModelsToDatabase(models) {
  console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

  let imported = 0;
  let skipped = 0;

  for (const model of models) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å
      const existing = await prisma.aIModel.findUnique({
        where: { modelId: model.modelId }
      });

      if (existing) {
        console.log(`–ú–æ–¥–µ–ª—å ${model.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        skipped++;
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
      await prisma.aIModel.create({
        data: model
      });

      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${model.name}`);
      imported++;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ${model.name}:`, error.message);
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:`);
  console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`);
  console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
  console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${models.length}`);
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –∏–∑ HTML...');

    // –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª–∏ –∏–∑ HTML
    const models = parseHTMLModels();

    if (models.length === 0) {
      console.log('‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML —Ñ–∞–π–ª–µ');
      return;
    }

    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
    models.forEach((model, index) => {
      console.log(`${index + 1}. ${model.name} (${model.provider}) - ${model.isFree ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è' : '–ü—Ä–µ–º–∏—É–º'}`);
    });

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await importModelsToDatabase(models);

    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { parseHTMLModels, importModelsToDatabase };
