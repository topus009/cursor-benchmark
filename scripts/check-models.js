const { PrismaClient } = require('../src/generated/prisma');

async function checkModels() {
  const prisma = new PrismaClient();

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
    const totalCount = await prisma.aIModel.count();
    console.log(`üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ: ${totalCount}\n`);

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    const modelsByProvider = await prisma.aIModel.groupBy({
      by: ['provider'],
      _count: { id: true },
      orderBy: { _count: { id: 'desc' } }
    });

    console.log('üè¢ –ú–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:');
    modelsByProvider.forEach(provider => {
      console.log(`  ${provider.provider}: ${provider._count.id}`);
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ (–Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
    const premiumModels = await prisma.aIModel.findMany({
      where: { isFree: false },
      select: { name: true, provider: true },
      orderBy: { name: 'asc' }
    });

    console.log(`\n‚≠ê –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ (${premiumModels.length}):`);
    premiumModels.forEach(model => {
      console.log(`  ${model.name} (${model.provider})`);
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    const recommendedModels = await prisma.aIModel.findMany({
      where: { isRecommended: true },
      select: { name: true, provider: true },
      orderBy: { name: 'asc' }
    });

    console.log(`\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (${recommendedModels.length}):`);
    recommendedModels.forEach(model => {
      console.log(`  ${model.name} (${model.provider})`);
    });

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ Cursor
    const cursorModels = await prisma.aIModel.findMany({
      where: { isAvailableInCursor: true },
      select: { name: true, provider: true },
      orderBy: { name: 'asc' }
    });

    console.log(`\nüñ±Ô∏è –ú–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ Cursor (${cursorModels.length}):`);
    if (cursorModels.length > 0) {
      cursorModels.slice(0, 5).forEach(model => {
        console.log(`  ${model.name} (${model.provider})`);
      });
      if (cursorModels.length > 5) {
        console.log(`  ... –∏ –µ—â–µ ${cursorModels.length - 5} –º–æ–¥–µ–ª–µ–π`);
      }
    }

    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const sampleModels = await prisma.aIModel.findMany({
      take: 10,
      select: {
        name: true,
        provider: true,
        category: true,
        isFree: true,
        isRecommended: true,
        isAvailableInCursor: true,
        isReasoning: true
      },
      orderBy: { name: 'asc' }
    });

    console.log('\nüìã –ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–µ–π:');
    sampleModels.forEach(model => {
      const status = model.isFree ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è' : '–ü—Ä–µ–º–∏—É–º';
      const recommended = model.isRecommended ? ' ‚≠ê' : '';
      const cursorIcon = model.isAvailableInCursor ? ' üñ±Ô∏è' : '';
      const reasoningIcon = model.isReasoning ? ' üß†' : '';
      console.log(`  ${model.name} (${model.provider}) - ${model.category} - ${status}${recommended}${cursorIcon}${reasoningIcon}`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º reasoning –º–æ–¥–µ–ª–∏
    const reasoningModels = await prisma.aIModel.findMany({
      where: { isReasoning: true },
      select: { name: true, provider: true },
      orderBy: { name: 'asc' }
    });

    console.log(`\nüß† Reasoning –º–æ–¥–µ–ª–µ–π (${reasoningModels.length}):`);
    if (reasoningModels.length > 0) {
      reasoningModels.slice(0, 10).forEach(model => {
        console.log(`  ${model.name} (${model.provider})`);
      });
      if (reasoningModels.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${reasoningModels.length - 10} –º–æ–¥–µ–ª–µ–π`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  checkModels();
}
