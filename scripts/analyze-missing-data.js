const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

async function analyzeMissingData() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    const models = await prisma.aIModel.findMany({
      include: {
        benchmarkResults: true,
        userRatings: true,
        _count: {
          select: {
            benchmarkResults: true,
            userRatings: true
          }
        }
      },
      orderBy: { name: 'asc' }
    });

    console.log(`üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ: ${models.length}\n`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    const modelsWithMissingData = [];
    const completeModels = [];
    const dataStats = {
      missingPricing: 0,
      missingContext: 0,
      missingBenchmarks: 0,
      missingRatings: 0,
      noBenchmarks: 0,
      noRatings: 0
    };

    for (const model of models) {
      const missingFields = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º pricing
      if (!model.pricingInput && !model.pricingOutput) {
        missingFields.push('pricing');
        dataStats.missingPricing++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º context window
      if (!model.contextWindow) {
        missingFields.push('context_window');
        dataStats.missingContext++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–Ω—á–º–∞—Ä–∫–∏
      if (model._count.benchmarkResults === 0) {
        missingFields.push('benchmarks');
        dataStats.noBenchmarks++;
      } else {
        dataStats.missingBenchmarks += model._count.benchmarkResults;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
      if (model._count.userRatings === 0) {
        missingFields.push('ratings');
        dataStats.noRatings++;
      } else {
        dataStats.missingRatings += model._count.userRatings;
      }

      if (missingFields.length > 0) {
        modelsWithMissingData.push({
          id: model.id,
          name: model.displayName,
          provider: model.provider,
          missingFields,
          hasBenchmarks: model._count.benchmarkResults > 0,
          hasRatings: model._count.userRatings > 0,
          pricingInput: model.pricingInput,
          contextWindow: model.contextWindow
        });
      } else {
        completeModels.push({
          id: model.id,
          name: model.displayName,
          provider: model.provider
        });
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º:');
    console.log(`  üí∞ –ú–æ–¥–µ–ª–µ–π –±–µ–∑ pricing: ${dataStats.missingPricing}`);
    console.log(`  üìè –ú–æ–¥–µ–ª–µ–π –±–µ–∑ context window: ${dataStats.missingContext}`);
    console.log(`  üìä –ú–æ–¥–µ–ª–µ–π –±–µ–∑ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: ${dataStats.noBenchmarks}`);
    console.log(`  ‚≠ê –ú–æ–¥–µ–ª–µ–π –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: ${dataStats.noRatings}`);
    console.log(`  ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ${completeModels.length}`);
    console.log(`  ‚ö†Ô∏è  –ú–æ–¥–µ–ª–µ–π —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${modelsWithMissingData.length}\n`);

    // –í—ã–≤–æ–¥–∏–º –º–æ–¥–µ–ª–∏ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (modelsWithMissingData.length > 0) {
      console.log('üî¥ –ú–æ–¥–µ–ª–∏ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
      modelsWithMissingData.forEach((model, index) => {
        console.log(`\n${index + 1}. ${model.name} (${model.provider})`);
        console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: ${model.missingFields.join(', ')}`);

        if (model.pricingInput) {
          console.log(`   üí∞ Pricing input: $${model.pricingInput}/1K`);
        } else {
          console.log(`   üí∞ Pricing: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }

        if (model.contextWindow) {
          console.log(`   üìè Context window: ${model.contextWindow}K —Ç–æ–∫–µ–Ω–æ–≤`);
        } else {
          console.log(`   üìè Context window: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }

        console.log(`   üìä –ë–µ–Ω—á–º–∞—Ä–∫–∏: ${model.hasBenchmarks ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
        console.log(`   ‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏: ${model.hasRatings ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
      });

      console.log(`\nüí° –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:`);
      console.log(`   ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (OpenAI, Anthropic, Google, etc.)`);
      console.log(`   ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ (Hugging Face, LMSYS, etc.)`);
      console.log(`   ‚Ä¢ –¶–µ–Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤`);
      console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã`);
    }

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const priorityModels = modelsWithMissingData
      .filter(model => model.missingFields.includes('pricing') || model.missingFields.includes('context_window'))
      .slice(0, 5);

    if (priorityModels.length > 0) {
      console.log(`\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:`);
      priorityModels.forEach((model, index) => {
        console.log(`   ${index + 1}. ${model.name} (${model.provider})`);
        console.log(`      –ò—Å–∫–∞—Ç—å: ${model.missingFields.join(', ')}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  analyzeMissingData();
}
