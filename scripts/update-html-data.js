const fs = require('fs');
const path = require('path');

async function updateHTMLData() {
    try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ HTML —Ñ–∞–π–ª–µ...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        const jsonPath = path.join(__dirname, '..', 'static-models-data.json');
        const htmlPath = path.join(__dirname, '..', 'static-models-comparison.html');

        if (!fs.existsSync(jsonPath)) {
            console.error('‚ùå –§–∞–π–ª static-models-data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        if (!fs.existsSync(htmlPath)) {
            console.error('‚ùå –§–∞–π–ª static-models-comparison.html –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        console.log('üìñ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞...');
        const jsonData = fs.readFileSync(jsonPath, 'utf8');
        const data = JSON.parse(jsonData);

        // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        console.log('üìñ –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª...');
        let htmlContent = fs.readFileSync(htmlPath, 'utf8');

        // –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ script —Ç–µ–≥–µ
        const scriptTagPattern = /<script id="models-data" type="application\/json">\s*\{[\s\S]*?\}\s*<\/script>/;
        const newScriptTag = `<script id="models-data" type="application/json">
${JSON.stringify(data, null, 2)}
    </script>`;

        if (scriptTagPattern.test(htmlContent)) {
            htmlContent = htmlContent.replace(scriptTagPattern, newScriptTag);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ HTML —Ñ–∞–π–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        } else {
            console.log('‚ö†Ô∏è Script —Ç–µ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π...');
            // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º script)
            const insertPattern = /<\/style>\s*\n\s*(?=<!-- Data embedded)/;
            if (insertPattern.test(htmlContent)) {
                htmlContent = htmlContent.replace(insertPattern, '</style>\n\n    ' + newScriptTag + '\n\n    ');
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ HTML —Ñ–∞–π–ª');
                return;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
        fs.writeFileSync(htmlPath, htmlContent, 'utf8');

        console.log('üíæ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω!');
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ ${data.stats.total} –º–æ–¥–µ–ª–µ–π`);
        console.log(`üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date(data.exportedAt).toLocaleString()}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ HTML —Ñ–∞–π–ª–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML (–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
function cleanHTMLData() {
    try {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML —Ñ–∞–π–ª–∞...\n');

        const htmlPath = path.join(__dirname, '..', 'static-models-comparison.html');

        if (!fs.existsSync(htmlPath)) {
            console.error('‚ùå –§–∞–π–ª static-models-comparison.html –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        let htmlContent = fs.readFileSync(htmlPath, 'utf8');

        // –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        const emptyData = {
            models: [],
            providers: [],
            categories: [],
            stats: {
                total: 0,
                withCursor: 0,
                withReasoning: 0,
                withAgent: 0,
                free: 0,
                premium: 0
            },
            exportedAt: new Date().toISOString()
        };

        const scriptTagPattern = /<script id="models-data" type="application\/json">\s*\{[\s\S]*?\}\s*<\/script>/;
        const newScriptTag = `<script id="models-data" type="application/json">
${JSON.stringify(emptyData, null, 2)}
    </script>`;

        if (scriptTagPattern.test(htmlContent)) {
            htmlContent = htmlContent.replace(scriptTagPattern, newScriptTag);
            fs.writeFileSync(htmlPath, htmlContent, 'utf8');
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ HTML —Ñ–∞–π–ª–µ –æ—á–∏—â–µ–Ω—ã!');
        } else {
            console.log('‚ö†Ô∏è Script —Ç–µ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HTML —Ñ–∞–π–ª–∞:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if (require.main === module) {
    const args = process.argv.slice(2);

    if (args.includes('--clean') || args.includes('-c')) {
        cleanHTMLData();
    } else {
        updateHTMLData();
    }
}

module.exports = { updateHTMLData, cleanHTMLData };
