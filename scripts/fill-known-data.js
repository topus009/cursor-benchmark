const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

// –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
const KNOWN_MODELS_DATA = {
  // OpenAI –º–æ–¥–µ–ª–∏
  'o3': {
    contextWindow: 200000,
    pricingInput: 0.01,
    pricingOutput: 0.03
  },
  'o3-pro': {
    contextWindow: 200000,
    pricingInput: 0.03,
    pricingOutput: 0.06
  },
  'o4-mini': {
    contextWindow: 128000,
    pricingInput: 0.00015,
    pricingOutput: 0.0006
  },
  'gpt-5': {
    contextWindow: 128000,
    pricingInput: 0.005,
    pricingOutput: 0.015
  },
  'gpt-5-fast': {
    contextWindow: 128000,
    pricingInput: 0.0025,
    pricingOutput: 0.01
  },
  'gpt-5-high': {
    contextWindow: 128000,
    pricingInput: 0.01,
    pricingOutput: 0.03
  },
  'gpt-5-high-fast': {
    contextWindow: 128000,
    pricingInput: 0.005,
    pricingOutput: 0.015
  },
  'gpt-5-low': {
    contextWindow: 128000,
    pricingInput: 0.001,
    pricingOutput: 0.002
  },
  'gpt-5-low-fast': {
    contextWindow: 128000,
    pricingInput: 0.0005,
    pricingOutput: 0.001
  },
  'gpt-5-medium': {
    contextWindow: 128000,
    pricingInput: 0.002,
    pricingOutput: 0.01
  },
  'gpt-5-medium-fast': {
    contextWindow: 128000,
    pricingInput: 0.001,
    pricingOutput: 0.002
  },
  'gpt-5-mini': {
    contextWindow: 128000,
    pricingInput: 0.00015,
    pricingOutput: 0.0006
  },
  'gpt-5-nano': {
    contextWindow: 128000,
    pricingInput: 0.000075,
    pricingOutput: 0.0003
  },
  'gpt-4.1': {
    contextWindow: 128000,
    pricingInput: 0.01,
    pricingOutput: 0.03
  },

  // Anthropic –º–æ–¥–µ–ª–∏
  'claude-3.7-sonnet': {
    contextWindow: 200000,
    pricingInput: 0.003,
    pricingOutput: 0.015
  },
  'claude-4-opus': {
    contextWindow: 200000,
    pricingInput: 0.015,
    pricingOutput: 0.075
  },
  'claude-4-sonnet': {
    contextWindow: 200000,
    pricingInput: 0.003,
    pricingOutput: 0.015
  },
  'claude-4-sonnet-1m': {
    contextWindow: 1000000,
    pricingInput: 0.003,
    pricingOutput: 0.015
  },
  'claude-4.1-opus': {
    contextWindow: 200000,
    pricingInput: 0.015,
    pricingOutput: 0.075
  },

  // Google –º–æ–¥–µ–ª–∏
  'gemini-2.5-pro': {
    contextWindow: 2097152,
    pricingInput: 0.00025,
    pricingOutput: 0.0005
  },
  'gemini-2.5-flash': {
    contextWindow: 1048576,
    pricingInput: 0.000075,
    pricingOutput: 0.0003
  },

  // DeepSeek –º–æ–¥–µ–ª–∏
  'deepseek-r1-0528': {
    contextWindow: 32768,
    pricingInput: 0.00014,
    pricingOutput: 0.00028
  },
  'deepseek-v3.1': {
    contextWindow: 32768,
    pricingInput: 0.00014,
    pricingOutput: 0.00028
  },

  // xAI –º–æ–¥–µ–ª–∏
  'grok-3': {
    contextWindow: 128000,
    pricingInput: 0.002,
    pricingOutput: 0.01
  },
  'grok-3-mini': {
    contextWindow: 128000,
    pricingInput: 0.0008,
    pricingOutput: 0.004
  },
  'grok-4': {
    contextWindow: 128000,
    pricingInput: 0.002,
    pricingOutput: 0.01
  },
  'grok-code-fast-1': {
    contextWindow: 128000,
    pricingInput: 0.002,
    pricingOutput: 0.01
  },

  // Kimi –º–æ–¥–µ–ª—å
  'kimi-k2-instruct': {
    contextWindow: 128000,
    pricingInput: 0.0005,
    pricingOutput: 0.001
  },

  // Cursor –º–æ–¥–µ–ª—å
  'cursor-small': {
    contextWindow: 32000,
    pricingInput: 0, // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
    pricingOutput: 0
  }
};

async function fillKnownData() {
  try {
    console.log('üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –º–æ–¥–µ–ª—è—Ö...\n');

    let updated = 0;
    let skipped = 0;

    for (const [modelName, data] of Object.entries(KNOWN_MODELS_DATA)) {
      try {
        // –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ (displayName)
        const model = await prisma.aIModel.findFirst({
          where: {
            OR: [
              { displayName: modelName },
              { name: modelName }
            ]
          }
        });

        if (!model) {
          console.log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª—å "${modelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
          skipped++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        const updateData = {};

        if (data.contextWindow && !model.contextWindow) {
          updateData.contextWindow = data.contextWindow;
        }

        if ((data.pricingInput !== undefined && data.pricingInput !== null) && (model.pricingInput === null || model.pricingInput === undefined)) {
          updateData.pricingInput = data.pricingInput;
          updateData.pricingOutput = data.pricingOutput;
        }

        if (Object.keys(updateData).length > 0) {
          await prisma.aIModel.update({
            where: { id: model.id },
            data: updateData
          });

          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: ${model.displayName} (${model.provider})`);
          const updates = [];
          if (updateData.contextWindow) updates.push(`context: ${data.contextWindow}K`);
          if (updateData.pricingInput) updates.push(`pricing: $${data.pricingInput}/$${data.pricingOutput}`);
          console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${updates.join(', ')}`);

          updated++;
        } else {
          console.log(`‚è≠Ô∏è  –ú–æ–¥–µ–ª—å "${model.displayName}" —É–∂–µ –∏–º–µ–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ`);
          skipped++;
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ "${modelName}":`, error.message);
        skipped++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${updated}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${skipped}`);
    console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated + skipped}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–æ–¥–µ–ª–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    const remainingModels = await prisma.aIModel.findMany({
      where: {
        OR: [
          { contextWindow: null },
          { pricingInput: null }
        ]
      },
      select: {
        displayName: true,
        provider: true,
        contextWindow: true,
        pricingInput: true
      }
    });

    if (remainingModels.length > 0) {
      console.log(`\nüìã –ú–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (${remainingModels.length}):`);
      remainingModels.slice(0, 10).forEach(model => {
        const missing = [];
        if (!model.contextWindow) missing.push('context window');
        if (!model.pricingInput) missing.push('pricing');
        console.log(`   ‚Ä¢ ${model.displayName} (${model.provider}) - –Ω—É–∂–Ω–æ: ${missing.join(', ')}`);
      });

      if (remainingModels.length > 10) {
        console.log(`   ... –∏ –µ—â–µ ${remainingModels.length - 10} –º–æ–¥–µ–ª–µ–π`);
      }

      console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:`);
      console.log(`   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
      console.log(`   2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ Hugging Face –∏–ª–∏ GitHub`);
      console.log(`   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ Google —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:`);
      console.log(`      "[model name] pricing"`);
      console.log(`      "[model name] context window"`);
      console.log(`      "[model name] specifications"`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  fillKnownData();
}
