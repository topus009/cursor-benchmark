const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

// –ú–æ–¥–µ–ª–∏ —Å agent capabilities –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
// –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –±–µ–Ω—á–º–∞—Ä–∫–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
const AGENT_MODELS = [
  // OpenAI –º–æ–¥–µ–ª–∏ —Å —Å–∏–ª—å–Ω—ã–º–∏ agent capabilities
  'gpt-4',
  'gpt-4o',
  'gpt-4o-mini',
  'gpt-4-turbo',
  'o1',
  'o1-preview',
  'o1-mini',
  'o3',
  'o3-mini',
  'o3-pro',

  // Anthropic –º–æ–¥–µ–ª–∏ —Å agent capabilities
  'claude-3-5-sonnet',
  'claude-3-7-sonnet',
  'claude-3-opus',
  'claude-3-haiku',
  'claude-3-sonnet',

  // Google –º–æ–¥–µ–ª–∏
  'gemini-2.0-flash-exp',
  'gemini-1.5-pro',
  'gemini-1.5-flash',
  'gemini-pro',
  'gemini-pro-vision',
  'gemini-2.5-pro',
  'gemini-2.5-flash',

  // xAI –º–æ–¥–µ–ª–∏
  'grok-4',
  'grok-3',
  'grok-beta',
  'grok-2',

  // DeepSeek –º–æ–¥–µ–ª–∏
  'deepseek-chat',
  'deepseek-r1',
  'deepseek-v3',
  'deepseek-coder',

  // Alibaba –º–æ–¥–µ–ª–∏
  'qwen2.5',
  'qwen2.5-coder',
  'qwen-turbo',
  'qwen-plus',
  'qwen-max',

  // Mistral –º–æ–¥–µ–ª–∏
  'mistral-large',
  'mistral-7b-instruct',
  'mixtral-8x7b-instruct',

  // Cohere –º–æ–¥–µ–ª–∏
  'command-r',
  'command-r-plus',

  // –î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ —Å agent capabilities
  'cursor-small',
  'cursor-fast',
  'codellama'
];

// –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
const AGENT_CAPABILITIES = {
  'claude-3-5-sonnet': ['tool_use', 'function_calling', 'multi_step_reasoning', 'code_generation', 'analysis'],
  'claude-3-7-sonnet': ['tool_use', 'function_calling', 'multi_step_reasoning', 'code_generation', 'analysis', 'self_reflection'],
  'gpt-4': ['tool_use', 'function_calling', 'multi_step_reasoning', 'code_generation', 'analysis'],
  'gpt-4o': ['tool_use', 'function_calling', 'multi_step_reasoning', 'code_generation', 'analysis', 'vision'],
  'o1': ['advanced_reasoning', 'multi_step_planning', 'code_generation', 'analysis', 'self_reflection'],
  'o3': ['advanced_reasoning', 'multi_step_planning', 'code_generation', 'analysis', 'self_reflection'],
  'gemini-2.5-pro': ['tool_use', 'function_calling', 'multi_step_reasoning', 'code_generation', 'analysis', 'vision'],
  'grok-4': ['tool_use', 'function_calling', 'multi_step_reasoning', 'code_generation', 'analysis', 'real_time_knowledge'],
  'deepseek-r1': ['advanced_reasoning', 'multi_step_planning', 'code_generation', 'analysis', 'self_reflection'],
};

async function updateAgentCapabilities() {
  try {
    console.log('ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Agent Capabilities –¥–ª—è –º–æ–¥–µ–ª–µ–π...\n');

    let updated = 0;
    let skipped = 0;

    // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–æ—Å–∏–º –≤—Å–µ –º–æ–¥–µ–ª–∏
    await prisma.aIModel.updateMany({
      data: { isAgent: false }
    });

    for (const modelName of AGENT_MODELS) {
      try {
        // –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
        const model = await prisma.aIModel.findFirst({
          where: {
            OR: [
              { name: modelName },
              { displayName: modelName },
              { modelId: modelName }
            ]
          }
        });

        if (!model) {
          console.log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª—å "${modelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
          skipped++;
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        const capabilities = AGENT_CAPABILITIES[modelName] || ['tool_use', 'function_calling', 'multi_step_reasoning'];

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
        await prisma.aIModel.update({
          where: { id: model.id },
          data: {
            isAgent: true,
            capabilities: JSON.stringify(capabilities)
          }
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model.displayName} (${model.provider}): ${capabilities.join(', ')}`);
        updated++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ "${modelName}":`, error.message);
        skipped++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${updated}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${skipped}`);
    console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated + skipped}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const agentModels = await prisma.aIModel.findMany({
      where: { isAgent: true },
      orderBy: { displayName: 'asc' }
    });

    if (agentModels.length > 0) {
      console.log(`\nü§ñ –ú–æ–¥–µ–ª–∏ —Å Agent Capabilities (${agentModels.length}):`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
      const byProvider = agentModels.reduce((acc, model) => {
        if (!acc[model.provider]) acc[model.provider] = [];
        acc[model.provider].push(model);
        return acc;
      }, {});

      Object.entries(byProvider).forEach(([provider, models]) => {
        console.log(`\nüìç ${provider}:`);
        models.forEach(model => {
          const capabilities = JSON.parse(model.capabilities || '[]');
          const capText = capabilities.slice(0, 3).join(', ') + (capabilities.length > 3 ? '...' : '');
          console.log(`   ‚Ä¢ ${model.displayName} (${capText})`);
        });
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ agent capabilities:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  updateAgentCapabilities();
}
